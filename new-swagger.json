{
	"swagger": "2.0",
	"info": {
		"description": "This is the swagger generated docs for the moonbase.app API.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
		"version": "1.0.1",
		"title": "Swagger Moonbase.app",
		"termsOfService": "http://swagger.io/terms/",
		"contact": {
			"email": "apiteam@swagger.io"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host": "moonbase.swagger.io",
	"basePath": "/v1",
	"tags": [
		{
			"name": "pet",
			"description": "Everything about your Pets",
			"externalDocs": {
				"description": "Find out more",
				"url": "http://swagger.io"
			}
		},
		{
			"name": "store",
			"description": "Access to Petstore orders"
		},
		{
			"name": "user",
			"description": "Operations about user",
			"externalDocs": {
				"description": "Find out more about our store",
				"url": "http://swagger.io"
			}
		}
	],
	"schemes": [
		"https",
		"http"
	],
	"paths": {
		"/user/{userId}/uploadImage": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "uploads an image",
				"description": "",
				"operationId": "uploadFile",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of user to update",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "additionalMetadata",
						"in": "formData",
						"description": "Additional data to pass to server",
						"required": false,
						"type": "string"
					},
					{
						"name": "file",
						"in": "formData",
						"description": "file to upload",
						"required": false,
						"type": "file"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/ApiResponse"
						}
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				]
			}
		},
		"/user": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Add a new user to the DB",
				"description": "",
				"operationId": "addUser",
				"consumes": [
					"application/json",
					"application/xml"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "User object that needs to be added to the store",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				]
			},
			"put": {
				"tags": [
					"user"
				],
				"summary": "Update an existing user",
				"description": "",
				"operationId": "updateUser",
				"consumes": [
					"application/json",
					"application/xml"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "User object that needs to be added to the store",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "User not found"
					},
					"405": {
						"description": "Validation exception"
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				]
			}
		},
		"/user/findByStatus": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Finds Users by status",
				"description": "Multiple status values can be provided with comma separated strings",
				"operationId": "findUsersByStatus",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "status",
						"in": "query",
						"description": "Status values that need to be considered for filter",
						"required": true,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"available",
								"pending",
								"used"
							],
							"default": "available"
						},
						"collectionFormat": "multi"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"400": {
						"description": "Invalid status value"
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				]
			}
		},
		"/User/findByTags": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Finds Users by tags",
				"description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
				"operationId": "findUsersByTags",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "tags",
						"in": "query",
						"description": "Tags to filter by",
						"required": true,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					},
					"400": {
						"description": "Invalid tag value"
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				],
				"deprecated": true
			}
		},
		"/user/{userId}": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Find user by ID",
				"description": "Returns a single user",
				"operationId": "getUserById",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of user to return",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "User not found"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"user"
				],
				"summary": "Updates a user in the DB with form data",
				"description": "",
				"operationId": "updateUserWithForm",
				"consumes": [
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"description": "ID of user that needs to be updated",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "name",
						"in": "formData",
						"description": "Updated name of the user",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"in": "formData",
						"description": "Updated status of the user",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				]
			},
			"delete": {
				"tags": [
					"user"
				],
				"summary": "Deletes a user",
				"description": "",
				"operationId": "deleteUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "api_key",
						"in": "header",
						"required": false,
						"type": "string"
					},
					{
						"name": "userId",
						"in": "path",
						"description": "User id to delete",
						"required": true,
						"type": "integer",
						"format": "int64"
					}
				],
				"responses": {
					"400": {
						"description": "Invalid ID supplied"
					},
					"404": {
						"description": "User not found"
					}
				},
				"security": [
					{
						"moonbase_auth": [
							"write:users",
							"read:users"
						]
					}
				]
			}
		},
		"/user/{username}": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Get user by user name",
				"description": "",
				"operationId": "getUserByName",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "The name that needs to be fetched. Use user1 for testing. ",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/User"
						}
					},
					"400": {
						"description": "Invalid username supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			},
			"put": {
				"tags": [
					"user"
				],
				"summary": "Updated user",
				"description": "This can only be done by the logged in user.",
				"operationId": "updateUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "name that need to be updated",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Updated user object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"400": {
						"description": "Invalid user supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			},
			"delete": {
				"tags": [
					"user"
				],
				"summary": "Delete user",
				"description": "This can only be done by the logged in user.",
				"operationId": "deleteUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "The name that needs to be deleted",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"400": {
						"description": "Invalid username supplied"
					},
					"404": {
						"description": "User not found"
					}
				}
			}
		},
		"/user/login": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Logs user into the system",
				"description": "",
				"operationId": "loginUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"name": "username",
						"in": "query",
						"description": "The user name for login",
						"required": true,
						"type": "string"
					},
					{
						"name": "password",
						"in": "query",
						"description": "The password for login in clear text",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"headers": {
							"X-Expires-After": {
								"type": "string",
								"format": "date-time",
								"description": "date in UTC when token expires"
							},
							"X-Rate-Limit": {
								"type": "integer",
								"format": "int32",
								"description": "calls per hour allowed by the user"
							}
						},
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/user/logout": {
			"get": {
				"tags": [
					"user"
				],
				"summary": "Logs out current logged in user session",
				"description": "",
				"operationId": "logoutUser",
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/user/createWithArray": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Creates list of users with given input array",
				"description": "",
				"operationId": "createUsersWithArrayInput",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "List of user object",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/user/createWithList": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Creates list of users with given input array",
				"description": "",
				"operationId": "createUsersWithListInput",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "List of user object",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/User"
							}
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		},
		"/user": {
			"post": {
				"tags": [
					"user"
				],
				"summary": "Create user",
				"description": "This can only be done by the logged in user.",
				"operationId": "createUser",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json",
					"application/xml"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Created user object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				],
				"responses": {
					"default": {
						"description": "successful operation"
					}
				}
			}
		}
	},
	"securityDefinitions": {
		"api_key": {
			"type": "apiKey",
			"name": "api_key",
			"in": "header"
		},
		"moonbase_auth": {
			"type": "oauth2",
			"authorizationUrl": "https://moonbase.swagger.io/oauth/authorize",
			"flow": "implicit",
			"scopes": {
				"read:users": "read your users",
				"write:users": "modify users in your account"
			}
		}
	},
	"definitions": {
		"ApiResponse": {
			"type": "object",
			"properties": {
				"code": {
					"type": "integer",
					"format": "int32"
				},
				"type": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"Category": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Category"
			}
		},
		"User": {
			"type": "object",
			"required": [
				"name",
				"photoUrls"
			],
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"category": {
					"$ref": "#/definitions/Category"
				},
				"name": {
					"type": "string",
					"example": "hacker"
				},
				"photoUrls": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"type": "string",
						"xml": {
							"name": "photoUrl"
						}
					}
				},
				"tags": {
					"type": "array",
					"xml": {
						"wrapped": true
					},
					"items": {
						"xml": {
							"name": "tag"
						},
						"$ref": "#/definitions/Tag"
					}
				},
				"status": {
					"type": "string",
					"description": "user status in the store",
					"enum": [
						"available",
						"pending",
						"used"
					]
				}
			},
			"xml": {
				"name": "User"
			}
		},
		"Tag": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"name": {
					"type": "string"
				}
			},
			"xml": {
				"name": "Tag"
			}
		},
		"User": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"username": {
					"type": "string"
				},
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"email": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"phone": {
					"type": "string"
				},
				"userStatus": {
					"type": "integer",
					"format": "int32",
					"description": "User Status"
				}
			},
			"xml": {
				"name": "User"
			}
		}
	},
	"externalDocs": {
		"description": "Find out more about Swagger",
		"url": "http://swagger.io"
	}
}